{
	"openapi": "3.0.0",
	"info": {
		"title": "Public REST API",
		"description": "this is a test description will be replaced later with an actual meanning",
		"version": "v5"
	},
	"servers": [
		{
			"url": "https://checkout.dineropay.com",
			"description": "End point"
		}
	],
	"paths": {
		"/v1/session/": {
			"post": {
				"tags": ["Purchase"],
				"operationId": "Authentication-request",
				"summary": "Authentication request to create a payment session",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Authentication_ob"
							}
						}
					}
				},

				"responses": {
					"200": {
						"$ref": "#/components/responses/Success_authentication"
					},
					"400": {
						"$ref": "#/components/responses/400"
					}
				}
			}
		},
		"/api/v1/payment/re—Åurring": {
			"post": {
				"operationId": "charge-token",
				"tags": ["Purchase"],
				"summary": "Charge a transaction using a saved token",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Recurring_ob",
								"example": {
									"merchant_key": "xxxxx-xxxxx-xxxxx",
									"order": {
										"number": "order-1234",
										"amount": "0.19",
										"description": "gift"
									},
									"recurring_init_trans_id": "dc66cdd8-d702-11ea-9a2f-0242c0a87002",
									"recurring_token": "9a2f-0242c0a87002",
									"hash": "{{session_hash}}"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Token_charged:200"
					},
					"400": {
						"$ref": "#/components/responses/400"
					}
				}
			}
		},
		"/api/v1/payment/status": {
			"post": {
				"tags": ["default"],
				"summary": "GET_TRANS_STATUS request",
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"type": "string",
								"example": "\"{  \\n   \\\"merchant_key\\\":\\\"xxxxx-xxxxx-xxxxx\\\",\\n   \\\"payment_id\\\":\\\"63c781cc-de3d-11eb-a1f1-0242ac130006\\\",\\n   \\\"hash\\\":\\\"{{operation_hash}}\\\"\\n}\\n\""
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"headers": {
							"Server": {
								"schema": {
									"type": "string",
									"example": "nginx"
								}
							},
							"Date": {
								"schema": {
									"type": "string",
									"example": "Tue, 06 Jul 2021 10:05:53 GMT"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string",
									"example": "application/json"
								}
							},
							"Transfer-Encoding": {
								"schema": {
									"type": "string",
									"example": "chunked"
								}
							},
							"Connection": {
								"schema": {
									"type": "string",
									"example": "keep-alive"
								}
							},
							"X-Powered-By": {
								"schema": {
									"type": "string",
									"example": "PHP/7.4.10"
								}
							},
							"Cache-Control": {
								"schema": {
									"type": "string",
									"example": "private, must-revalidate"
								}
							},
							"pragma": {
								"schema": {
									"type": "string",
									"example": "no-cache"
								}
							},
							"expires": {
								"schema": {
									"type": "number",
									"example": "-1"
								}
							},
							"X-Content-Type-Options": {
								"schema": {
									"type": "string",
									"example": "nosniff"
								}
							},
							"X-XSS-Protection": {
								"schema": {
									"type": "string",
									"example": "1; mode=block"
								}
							},
							"Strict-Transport-Security": {
								"schema": {
									"type": "string",
									"example": "max-age=31536000"
								}
							},
							"Content-Security-Policy": {
								"schema": {
									"type": "string",
									"example": "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: https://*.google-analytics.com https://*.googleapis.com https://*.gstatic.com http://www.w3.org https://*.rafinita.com"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"example-0": {
										"summary": "GET_TRANS_STATUS request (settled)",
										"value": {
											"payment_id": "63c781cc-de3d-11eb-a1f1-0242ac130006",
											"date": "2021-07-06 09:34:41",
											"status": "settled",
											"order": {
												"number": "order-1234",
												"amount": "0.19",
												"currency": "USD",
												"description": "Important gift"
											},
											"customer": {
												"name": "John Doe",
												"email": "test@mail.com"
											}
										}
									},
									"example-1": {
										"summary": "GET_TRANS_STATUS request (declined)",
										"value": {
											"payment_id": "03e46e96-de42-11eb-aea7-0242ac140002",
											"date": "2021-07-06 10:07:47",
											"status": "decline",
											"reason": "Declined by processing",
											"order": {
												"number": "order-1234",
												"amount": "0.19",
												"currency": "USD",
												"description": "Important gift"
											},
											"customer": {
												"name": "John Doe",
												"email": "test@mail.com"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/payment/refund": {
			"post": {
				"tags": ["default"],
				"summary": "Refund request",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"example": {
									"merchant_key": "xxxxx-xxxxx-xxxxx",
									"payment_id": "63c781cc-de3d-11eb-a1f1-0242ac130006",
									"amount": "0.19",
									"hash": "{{operation_hash}}"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "OK",
						"headers": {
							"Server": {
								"schema": {
									"type": "string",
									"example": "nginx"
								}
							},
							"Date": {
								"schema": {
									"type": "string",
									"example": "Tue, 06 Jul 2021 10:26:35 GMT"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string",
									"example": "application/json"
								}
							},
							"Transfer-Encoding": {
								"schema": {
									"type": "string",
									"example": "chunked"
								}
							},
							"Connection": {
								"schema": {
									"type": "string",
									"example": "keep-alive"
								}
							},
							"X-Powered-By": {
								"schema": {
									"type": "string",
									"example": "PHP/7.4.10"
								}
							},
							"Cache-Control": {
								"schema": {
									"type": "string",
									"example": "private, must-revalidate"
								}
							},
							"pragma": {
								"schema": {
									"type": "string",
									"example": "no-cache"
								}
							},
							"expires": {
								"schema": {
									"type": "number",
									"example": "-1"
								}
							},
							"X-Content-Type-Options": {
								"schema": {
									"type": "string",
									"example": "nosniff"
								}
							},
							"X-XSS-Protection": {
								"schema": {
									"type": "string",
									"example": "1; mode=block"
								}
							},
							"Strict-Transport-Security": {
								"schema": {
									"type": "string",
									"example": "max-age=31536000"
								}
							},
							"Content-Security-Policy": {
								"schema": {
									"type": "string",
									"example": "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: https://*.google-analytics.com https://*.googleapis.com https://*.gstatic.com http://www.w3.org https://*.rafinita.com"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"example": {
									"payment_id": "63c781cc-de3d-11eb-a1f1-0242ac130006",
									"result": "accepted"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Recurring_ob": {
				"type": "object",
				"required": [
					"merchant_key",
					"recurring_init_trans_id",
					"recurring_token",
					"hash",
					"order"
				],
				"properties": {
					"recurring_init_trans_id": {
						"type": "string",
						"description": "Transaction ID of the primary transaction in the Payment Platform",
						"format": "uuid",
						"example": "dc66cdd8-d702-11ea-9a2f-0242c0a87002"
					},
					"recurring_token": {
						"type": "string",
						"description": "Recurring token",
						"example": "9a2f-0242c0a87002"
					},
					"schedule_id": {
						"type": "string",
						"format": "uuid",
						"description": "Schedule ID for recurring payments it s available when `recurring_init = true` "
					},
					"hash": {
						"type": "string",
						"description": "Special signature to validate your request to Payment Platform Addition in Signature section \n Must be SHA1 of MD5 encoded string"
					},
					"order": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Order_ob"
							}
						]
					}
				}
			},
			"Authentication_ob": {
				"type": "object",
				"required": [
					"merchant_key",
					"operation",
					"sucess_url",
					"hash",
					"order"
				],
				"description": "this object is used to start a a payment session",
				"properties": {
					"merchant_key": {
						"description": "Key for Merchant identification",
						"type": "string",
						"format": "uuid"
					},
					"operation": {
						"type": "string",
						"description": "Defines a payment transaction",
						"enum": ["purchase"]
					},
					"methods": {
						"type": "array",
						"items": {
							"type": "string",
							"description": "Names of the desired payment method to be available in the checkout page",
							"example": "[stcpay ,visa]"
						},
						"description": "An array of payment methods. Limits the available methods on the Checkout page (the list of the possible values in the Payment methods section). In the case of parameter absence, the pre-routing rules are applied. If pre-routing rules are not configured, all available payment methods are displayed"
					},
					"sucess_url": {
						"type": "string",
						"maxLength": 1024,
						"format": "url",
						"description": "URL to redirect the Customer in case of the successful payment"
					},
					"cancel_url": {
						"type": "string",
						"maxLenght": 1024,
						"format": "url",
						"description": "URL to return Customer in case of a payment cancellation \n (‚ÄúClose‚Äù button on the Checkout page)"
					},
					"url_target": {
						"type": "string",
						"description": "Name of, or keyword for a browsing context where Customer should be returned according to HTML specification"
					},
					"req_token": {
						"type": "boolean",
						"description": "Special attribute pointing for further tokenization If the `card_token` is specified, `req_token` will be ignored"
					},
					"card_token": {
						"type": "array",
						"items": {
							"type": "string",
							"description": "Credit card token value"
						},
						"maxLength": 64,
						"description": "Credit card token value",
						"example": "[f5d6a0ab6fcfb6487a39e2256e50fff3c95aaa97]"
					},
					"recurring_init": {
						"type": "boolean",
						"description": "Initialization of the transaction with possible following recurring"
					},
					"schedule_id": {
						"type": "string",
						"format": "uuid",
						"description": "Schedule ID for recurring payments it s available when `recurring_init = true` "
					},
					"hash": {
						"type": "string",
						"description": "Special signature to validate your request to Payment Platform Addition in Signature section \n Must be SHA1 of MD5 encoded string"
					},
					"order": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Order_ob"
							}
						]
					},
					"customer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Customer_ob"
							}
						]
					},
					"billing_address": {
						"type": "object",
						"description": "Billing address information \n **Condition:** If the object or some object's parameters are NOT specified in the request, then it will be displayed on the Checkout page (if a payment method needs)",
						"properties": {
							"country": {
								"$ref": "#/components/schemas/Country"
							},
							"state": {
								"type": "string",
								"format": "ISO 3166-1 alpha-2",
								"description": "Billing state address"
							},
							"address": {
								"type": "string",
								"minimum": 2,
								"maximum": 32,
								"description": "Billing address"
							},
							"city": {
								"type": "string",
								"minimum": 2,
								"maximum": 32,
								"description": "Billing city"
							},
							"house_number": {
								"type": "string",
								"minimum": 1,
								"maximum": 9,
								"description": "house number",
								"nullablle": true
							},
							"zip": {
								"type": "string",
								"minimum": 2,
								"maximum": 10,
								"description": "Billing zip code"
							},
							"phone": {
								"type": "string",
								"format": "phone",
								"maxLength": 32,
								"description": "Phone number in the `<country_code> <number>` format",
								"example": "+966 xxxxxxxxx"
							}
						}
					}
				}
			},
			"Order_ob": {
				"type": "object",
				"description": "Information about an order",
				"required": ["number", "amount", "currency", "description"],
				"properties": {
					"number": {
						"maxLenght": 255,
						"type": "string",
						"description": "Order ID",
						"exmaple": "11A22"
					},
					"amount": {
						"$ref": "#/components/schemas/Amount"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"description": {
						"type": "string",
						"maxLenght": 1024,
						"description": "Product name",
						"example": "gift"
					}
				}
			},
			"Customer_ob": {
				"type": "object",
				"description": "Customer's information. Send an object if a payment method needs",
				"properties": {
					"name": {
						"type": "string",
						"format": "Latin basic [a-z A-Z]",
						"description": "Customer's name Condition: If the parameter is NOT specified in the request, then it will be displayed on the Checkout page (if a payment method needs) - the \"Cardholder\" field"
					},
					"email": {
						"$ref": "#/components/schemas/Email"
					}
				}
			},
			"Currency": {
				"type": "string",
				"maxLength": 3,
				"format": "ISO 4217",
				"description": "Currency code in the ISO 4217 standard (e.g. 'SAR')."
			},
			"Country": {
				"type": "string",
				"maxLength": 2,
				"format": "ISO 3166-1 alpha-2",
				"example": "SA",
				"description": "Country code in the ISO 3166-1 alpha-2 format (e.g. 'SA')"
			},
			"Email": {
				"type": "string",
				"format": "email",
				"maxLength": 254,
				"description": "Customer's email address Condition: If the parameter is NOT specified in the request, then it will be displayed on the Checkout page (if a payment method needs) - the \"E-mail\" field"
			},
			"Amount": {
				"type": "float",
				"maxLength": 255,
				"minimun": 0,
				"example": 22.0,
				"description": "Pay attention that amount will be exponent so if you pass `1 it will be 1.00` "
			}
		},
		"responses": {
			"Success_authentication": {
				"description": "OK",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"description": "the session url it will be used to forward the customer to the checkout page",
							"properties": {
								"redirect_url": {
									"type": "string",
									"fromat": "url",
									"readOnly": true
								}
							}
						}
					}
				}
			},
			"400": {
				"description": "Invalid data submitted or request processing error",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"error_code": {
									"type": "integer"
								},
								"error_message": {
									"type": "string",
									"description": "what cause the error"
								},
								"errors": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"error_code": {
												"type": "integer"
											},
											"error_message": {
												"type": "string",
												"description": "what cause the error"
											}
										}
									},
									"example": {
										"error_code": 0,
										"error_message": "Request data is invalid",
										"errors": [
											{
												"error_code": 100000,
												"error_message": "operation: The value you selected is not a valid choice."
											},
											{
												"error_code": 100000,
												"error_message": "order.amount: This value should be greater than 0."
											},
											{
												"error_code": 100000,
												"error_message": "cancel_url: This value is not a valid URL."
											},
											{
												"error_code": 100000,
												"error_message": "hash: Hash is not valid."
											}
										]
									}
								}
							}
						}
					}
				}
			},
			"Token_charged:200": {
				"description": "OK",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"required": ["status", "date", "payment_id", "order"],
							"description": "the response will show if the saved card has been successfully charged or not ",
							"properties": {
								"status": {
									"type": "string",
									"enum": ["SETTLED", "PENDING", "DECLINE"],
									"description": "Payment status",
									"readOnly": true,
									"example": "SETTLED"
								},
								"payment_id": {
									"type": "string",
									"readOnly": true,
									"maxLenght": 255,
									"format": "uuid",
									"description": "Transaction ID (public)",
									"example": "dc66cdd8-d702-11ea-9a2f-0242c0a87002"
								},
								"reason": {
									"type": "string",
									"description": "Decline reason translation for unsuccessful payment. \n It displays only if the transaction is unsuccessful",
									"readOnly": true,
									"example": "The operation was rejected. Please contact the site support"
								},
								"date": {
									"type": "strig",
									"format": "ISO 8601",
									"description": "Transaction date",
									"example": "2020-08-05"
								},
								"schedule_id": {
									"type": "string",
									"description": "Schedule ID for recurring payments",
									"format": "uuid",
									"example": "57fddecf-17b9-4d38-9320-a670f0c29ec0"
								},
								"order": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Order_ob"
										}
									]
								}
							}
						},
						"examples": {
							"success": {
								"summary": "Recurring (settled)",
								"value": {
									"status": "settled",
									"payment_id": "dc66cdd8-d702-11ea-9a2f-0242c0a87002",
									"date": "2020-08-05 07:41:10",
									"order": {
										"number": "order-1234",
										"amount": "0.19",
										"currency": "USD",
										"description": "very important gift"
									}
								}
							},
							"rejected": {
								"summary": "Recurring (declined)",
								"value": {
									"status": "declined",
									"reason": "declined by processing",
									"payment_id": "dc66cdd8-d702-11ea-9a2f-0242c0a87002",
									"date": "2020-08-05 07:41:10",
									"order": {
										"number": "order-1234",
										"amount": "0.19",
										"currency": "USD",
										"description": "very important gift"
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
